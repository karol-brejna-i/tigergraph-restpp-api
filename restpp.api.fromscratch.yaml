openapi: 3.0.0
info:
  title: TigerGraph REST++ API
  description: Title
  version: 1.0.0
  contact: {}
servers:
  - url: "http://192.168.0.105:9000"
tags:
  - name: done
    description: Specification tested
  - name: todo
    description: A draft version for the endpoint

paths:
  /graph/delete_by_type/vertices/{vertex_type}/:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.

  /graph/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: source_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: edge_type
        in: path
        required: true
        schema:
          type: string
          example: LIKES
        description: |
          The type name of the edges.

          *Note:* Use "_" for edge_type in the URL to permit any edge type.
      - name: target_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.
      - name: target_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/vertices/{vertex_type}/{vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/{graph_name}/delete_by_type/vertices/{vertex_type}/:
    delete:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.

  /graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: edge_type
        in: path
        required: true
        schema:
          type: string
          example: LIKES
        description: |
          The type name of the edges.

          *Note:* Use "_" for edge_type in the URL to permit any edge type.
      - name: target_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.
      - name: target_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/{graph_name}/vertices/{vertex_type}/{vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.



  /allpaths/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /deleted_vertex_check/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /echo/{graph_name}:
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /endpoints/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /query_result/{requestid}:
    get:
      summary: TBD
      description: |
        This endpoint allows you to check the results of queries run in Detached Mode if they have finished running.
        If the query is still running, the endpoint will respond with an error and a message saying
        "Unable to retrieve result for query <requestid>". Ensure that the query is finished before checking its result.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: requestid
        in: path
        schema:
          type: string
          example: 196611.RESTPP_1_1.1630601692834.N
        description: The id of a query request.

  /query_status/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /rebuildnow/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).



  /shortestpath/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /showlicenseinfo/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /showprocesslist/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /statistics/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /version/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /abortquery/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /builtins/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /ddl/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /graph/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /restpploader/{graph_name}:
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: my_graph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        error:
          type: boolean
        message:
          type: string
    MessageResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    StatisticsResponse:
      type: object
      properties:
        GET /statistics/{graph_name}:
          type: object
          properties:
            CompletedRequests:
              type: number
            QPS:
              type: number
            TimeoutRequests:
              type: number
            AverageLatency:
              type: number
            MaxLatency:
              type: number
            MinLatency:
              type: number
            LatencyPercentile:
              type: array
              items:
                type: number
    QueryResponse:
      type: object
      properties:
        version:
          type: object
          properties:
            edition:
              type: string
            api:
              type: string
            schema:
              type: number
        error:
          type: boolean
        message:
          type: string
        results:
          type: array
          items:
            type: object
            properties: {}
