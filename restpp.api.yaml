openapi: 3.0.0
info:
  title: TigerGraph REST++ API
  description: Title
  version: 1.0.0
  contact: {}
servers:
  - url: "http://192.168.0.105:9000"
tags:
  - name: query
    description: Endpoints for querying
  - name: diagnostics
    description: Endpoints for querying
paths:
  /version/{graph_name}:
    get:
      summary: Show component versions
      description: |
        This endpoint returns the GIT versions of all components of the system.

        See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_show_component_versions
      operationId: version
      tags:
        - diagnostics
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /echo/{graph_name}:
    get:
      summary: Echo
      description: |
        A simple diagnostic utility.
        Expected response is {"message": "Hello GSQL"}.

        See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_echo
      operationId: echoGet
      tags:
        - diagnostics
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: Echo
      description: |
        A simple diagnostic utility.
        Expected response is {"message": "Hello GSQL"}.

        See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_echo
      operationId: echoPost
      tags:
        - diagnostics
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /statistics/{graph_name}:
    get:
      summary: Show query performance
      description: |
        Returns real-time query performance statistics over the given time period, as specified by the **seconds** parameter.
        
        See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_show_query_performance
      operationId: statistics
      tags:
        - diagnostics
      parameters:
        - name: seconds
          in: query
          required: true
          schema:
            type: integer
            example: 10
          description: Duration of statistics collection (1 ≤ n ≤ 60).
        - name: segments
          in: query
          required: false
          schema:
            type: integer
            example: 10
          description: |
            Integer that indicates the number of segments that LatencyPercentile array in the response will be split into.
            The value for this endpoint must be between 1 and 100 and has a default value of 10.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /endpoints/{graph_name}:
    get:
      summary: List all endpoints
      description: |
        This endpoint returns a list of the installed endpoints and their parameters.
        There are three types of endpoints, described in the table below.
          * builtin - Endpoints presinstalled in TigerGraph (like this one)
          * dynamic - Endpoints generated when installing GSQL queries
          * static - User installed endpoints

        To include one or more of the endpoint types in the output,  include the endpoint type
        in the parameter query string and set its value to true.
        If no type parameters are provided, all endpoints are returned.

        See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_list_all_endpoints
        See: https://docs.tigergraph.com/tigergraph-server/current/api/json-catalog
      operationId: endpoints
      parameters:
        - name: builtin
          in: query
          required: false
          schema:
            type: boolean
            example: true
          description: trueEndpoints presinstalled in TigerGraph (like this one).
        - name: dynamic
          in: query
          required: false
          schema:
            type: boolean
            example: true
          description: trueEndpoints generated when installing GSQL queries.
        - name: static
          in: query
          required: false
          schema:
            type: boolean
            example: true
          description: trueUser installed endpoints.
      tags:
        - diagnostics
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /query/{graph_name}/{query_name}:
    get:
      summary: Run an installed query
      description: |
        Each time a new TigerGraph query is installed, a dynamic endpoint is generated.
        This new endpoint enables the user to run the new TigerGraph query through HTTP requests
        and giving the parameters in URL or in a data payload. In the case of a GET request,
        parameters should be passed in through the query string.
      operationId: runInstalledQueryGet
      parameters:
        - name: read_committed
          in: query
          description: |
            Boolean value that indicates whether to use read-committed isolation level for the query.
            At the read committed level, it is guaranteed that any data read is committed at the moment it is read.
            By default, it is off.
          required: false
          schema:
            type: boolean
        - in: query
          name: params
          description: |
            When using a GET request to run an installed query, the query parameters are passed in through the query string of the URL.
          schema:
            type: object
            additionalProperties:
              type: string
          style: form
          explode: true
      tags:
        - query
      responses:
        '200':
          description: Query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
    post:
      summary: Run an installed query
      description: |
        Each time a new TigerGraph query is installed, a dynamic endpoint is generated.
        This new endpoint enables the user to run the new TigerGraph query through HTTP requests
        and giving the parameters in URL or in a data payload.

        Users can run queries through a POST request, which allows them to pass query parameters in JSON.
        This is especially helpful when the query takes complex parameters.
      operationId: runInstalledQueryPost
      parameters:
        - name: read_committed
          in: query
          description: |
            Boolean value that indicates whether to use read-committed isolation level for the query.
            At the read committed level, it is guaranteed that any data read is committed at the moment it is read.
            By default, it is off.
          required: false
          schema:
            type: boolean
      requestBody:
        description: Optional description in *Markdown*
        required: false
        content:
          application/json:
            schema:
              type: object
      tags:
        - query
      responses:
        '200':
          description: Query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
    parameters:
      - name: graph_name
        in: path
        description: Graph name
        required: true
        schema:
          type: string
      - name: query_name
        in: path
        description: Query name
        required: true
        schema:
          type: string
      - in: header
        name: GSQL-REPLICA
        description: |
          f you have a TigerGraph HA cluster, you can specify a query to run on a particular replica
          with the HTTP header GSQL-REPLICA. The value of the header needs to be an integer within
          the range one to the replication factor of the cluster. If you supply a invalid value for the header,
          the request will return an error.
        schema:
          type: number
        required: false
      - in: header
        name: GSQL-THREAD-LIMIT
        description: |
          When running a query through RESTPP, you can specify a limit on the number of threads that the query is allowed to use on each node.
          The number of threads used by a query means the number of vCPUs used by the query.
          By default, a query will use all threads that are available on a machine.
        schema:
          type: number
        required: false
      - in: header
        name: GSQL-TIMEOUT
        schema:
          type: number
        required: false
      - in: header
        name: RESPONSE-LIMIT
        schema:
          type: number
        required: false

  /graph/delete_by_type/vertices/{vertex_type}/:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.

  /graph/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: source_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: edge_type
        in: path
        required: true
        schema:
          type: string
          example: LIKES
        description: |
          The type name of the edges.

          *Note:* Use "_" for edge_type in the URL to permit any edge type.
      - name: target_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.
      - name: target_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/vertices/{vertex_type}/{vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/{graph_name}/delete_by_type/vertices/{vertex_type}/:
    delete:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.

  /graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: edge_type
        in: path
        required: true
        schema:
          type: string
          example: LIKES
        description: |
          The type name of the edges.

          *Note:* Use "_" for edge_type in the URL to permit any edge type.
      - name: target_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: source_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.
      - name: target_vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.

  /graph/{graph_name}/vertices/{vertex_type}/{vertex_id}:
    delete:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).
      - name: vertex_type
        in: path
        required: true
        schema:
          type: string
          example: Person
        description: The type of vertex.
      - name: vertex_id
        in: path
        required: true
        schema:
          type: string
          example: 11223342243
        description: The ID of the vertex.



  /allpaths/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /deleted_vertex_check/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /query_result/{requestid}:
    get:
      summary: TBD
      description: |
        This endpoint allows you to check the results of queries run in Detached Mode if they have finished running.
        If the query is still running, the endpoint will respond with an error and a message saying
        "Unable to retrieve result for query <requestid>". Ensure that the query is finished before checking its result.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: requestid
        in: path
        required: true
        schema:
          type: string
          example: 196611.RESTPP_1_1.1630601692834.N
        description: The id of a query request.

  /query_status/{graph_name}:
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /rebuildnow/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).



  /shortestpath/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /showlicenseinfo/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /showprocesslist/{graph_name}:
    get:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

  /abortquery/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    get:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /builtins/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /ddl/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /graph/{graph_name}:
    post:
      summary: TBD

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).


  /restpploader/{graph_name}:
    post:
      summary: TBD
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
    parameters:
      - name: graph_name
        in: path
        required: true
        schema:
          type: string
          example: mygraph
        description: The name of the graph (REQUIRED in case of multiple graph in the database).

components:
  schemas:
    HelloResponse:
      type: object
      properties:
        error:
          type: boolean
        message:
          type: string
    MessageResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
    StatisticsResponse:
      type: object
      properties:
        GET /statistics/{graph_name}:
          type: object
          properties:
            CompletedRequests:
              type: number
            QPS:
              type: number
            TimeoutRequests:
              type: number
            AverageLatency:
              type: number
            MaxLatency:
              type: number
            MinLatency:
              type: number
            LatencyPercentile:
              type: array
              items:
                type: number
    QueryResponse:
      type: object
      properties:
        version:
          type: object
          properties:
            edition:
              type: string
            api:
              type: string
            schema:
              type: number
        error:
          type: boolean
        message:
          type: string
        results:
          type: array
          items:
            type: object
            properties: {}
